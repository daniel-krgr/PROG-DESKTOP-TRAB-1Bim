/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.unipar.osmecanica;

import br.unipar.osmecanica.model.Servico;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel
 */
public class SelecionarServicoFrame extends javax.swing.JFrame {

    private iListener listener;
    /**
     * Creates new form SelecionarServicoFrame
     */
    private DefaultTableModel modelo = new DefaultTableModel(){
        public boolean isCellEditable(int row, int column) {
        return false;
    }
    };
    private int linhaSelecionada = -1;
    
    private List<Servico> listaServicos= new ArrayList<>();
    
    private OSMecanicaFrame osMecanicaFrame;
    
    public SelecionarServicoFrame(iListener listener) {
        this.listener = listener;
        initComponents();
        setLocationRelativeTo(null);
        
        carregaTabela();
        listaServicos.add(new Servico("Troca de óleo", "Troca de óleo do motor", 100.00));
        listaServicos.add(new Servico("Alinhamento", "Alinhamento de direção", 80.00));
        listaServicos.add(new Servico("Balanceamento", "Balanceamento das rodas", 70.00));
        listaServicos.add(new Servico("Revisão geral", "Verificação e ajuste completo do veículo", 300.00));
        listaServicos.add(new Servico("Troca de filtro de ar", "Substituição do filtro de ar do motor", 60.00));
        listaServicos.add(new Servico("Troca de pastilhas", "Substituição das pastilhas de freio", 150.00));
        listaServicos.add(new Servico("Troca de bateria", "Remoção e instalação de nova bateria", 250.00));
        listaServicos.add(new Servico("Troca de correia dentada", "Substituição da correia dentada", 400.00));
        listaServicos.add(new Servico("Higienização do ar condicionado", "Limpeza e higienização do sistema de ar", 120.00));
        listaServicos.add(new Servico("Polimento de faróis", "Restauração do brilho dos faróis", 90.00));

        modelo.addRow(new Object[]{"Troca de óleo", "Troca de óleo do motor", 100.00});
        modelo.addRow(new Object[]{"Alinhamento", "Alinhamento de direção", 80.00});
        modelo.addRow(new Object[]{"Balanceamento", "Balanceamento das rodas", 70.00});
        modelo.addRow(new Object[]{"Revisão geral", "Verificação e ajuste completo do veículo", 300.00});
        modelo.addRow(new Object[]{"Troca de filtro de ar", "Substituição do filtro de ar do motor", 60.00});
        modelo.addRow(new Object[]{"Troca de pastilhas", "Substituição das pastilhas de freio", 150.00});
        modelo.addRow(new Object[]{"Troca de bateria", "Remoção e instalação de nova bateria", 250.00});
        modelo.addRow(new Object[]{"Troca de correia dentada", "Substituição da correia dentada", 400.00});
        modelo.addRow(new Object[]{"Higienização do ar condicionado", "Limpeza e higienização do sistema de ar", 120.00});
        modelo.addRow(new Object[]{"Polimento de faróis", "Restauração do brilho dos faróis", 90.00});


    }

    public void carregaTabela(){
        //adiciona colunas na tebela
        modelo.addColumn("Serviço");
        modelo.addColumn("Descrição");
        modelo.addColumn("Preço");
        tbSelecionarServico.setModel(modelo);
        
        //altera a largura das colunas  
        tbSelecionarServico.getColumnModel().getColumn(0).setPreferredWidth(100);
        tbSelecionarServico.getColumnModel().getColumn(1).setPreferredWidth(350);
        tbSelecionarServico.getColumnModel().getColumn(2).setPreferredWidth(5);
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbSelecionarServico = new javax.swing.JTable();
        btCancelar = new javax.swing.JButton();
        btAdicionar = new javax.swing.JButton();
        tfQuantidade = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbSelecionarServico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Descrição", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbSelecionarServico);
        if (tbSelecionarServico.getColumnModel().getColumnCount() > 0) {
            tbSelecionarServico.getColumnModel().getColumn(0).setPreferredWidth(100);
            tbSelecionarServico.getColumnModel().getColumn(1).setPreferredWidth(300);
            tbSelecionarServico.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        btCancelar.setText("Cancelar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btAdicionar.setText("Adicionar");
        btAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarActionPerformed(evt);
            }
        });

        tfQuantidade.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfQuantidadeActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Quantidade:");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(tfQuantidade)
                    .addComponent(btAdicionar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarActionPerformed
        linhaSelecionada = tbSelecionarServico.getSelectedRow();

        if(linhaSelecionada >= 0){
            Object nomeObject = tbSelecionarServico.getValueAt(linhaSelecionada, 0);
            Object descObject = tbSelecionarServico.getValueAt(linhaSelecionada, 1);
            Object valorObject = tbSelecionarServico.getValueAt(linhaSelecionada, 2);

            String nome = (String) nomeObject;
            String descricao = (String) descObject;
            double valor = (double) valorObject;



            int quantidade = 1;
            try {
                quantidade = Integer.parseInt(tfQuantidade.getText());
                if (quantidade <= 0) {
                    JOptionPane.showMessageDialog(this,
                            "Quantidade deve ser maior que zero",
                            "Erro",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this,
                        "Quantidade deve ser um número inteiro",
                        "Erro",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            listener.adicionarServico(quantidade, nome, descricao, valor);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this,
                    "Selecione um serviço da tabela.",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE);
        }





    }//GEN-LAST:event_btAdicionarActionPerformed

    private void tfQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfQuantidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfQuantidadeActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdicionar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbSelecionarServico;
    private javax.swing.JTextField tfQuantidade;
    // End of variables declaration//GEN-END:variables
}
